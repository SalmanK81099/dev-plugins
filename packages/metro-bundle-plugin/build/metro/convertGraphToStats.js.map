{"version":3,"file":"convertGraphToStats.js","sourceRoot":"","sources":["../../src/metro/convertGraphToStats.ts"],"names":[],"mappings":"AACA,OAAO,IAAI,MAAM,MAAM,CAAC;AAaxB,MAAM,UAAU,mBAAmB,CAAC,EAAE,WAAW,EAAE,UAAU,EAAE,UAAU,EAAE,KAAK,EAAE,OAAO,EAAkB;IACzG,OAAO;QACL,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,UAAU,CAAC;QACtC,UAAU,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,aAAa,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;QAC9D,YAAY,CAAC,WAAW,EAAE,KAAK,CAAC;QAChC,cAAc,CAAC,OAAO,CAAC;KACxB,CAAC;AACJ,CAAC;AAED,SAAS,cAAc,CAAC,OAAkC;IACxD,OAAO;QACL,GAAG,OAAO;QACV,mBAAmB,EAAE,SAAS;QAC9B,cAAc,EAAE,SAAS;QACzB,qBAAqB,EAAE,SAAS;QAChC,qBAAqB,EAAE,SAAS;KACjC,CAAC;AACJ,CAAC;AAED,SAAS,YAAY,CAAC,WAAmB,EAAE,KAA8B;IACvE,OAAO;QACL,GAAG,KAAK;QACR,WAAW,EAAE,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC;QACnD,YAAY,EAAE,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,UAAU,EAAE,EAAE,CAAC,CACxE,aAAa,CAAC,WAAW,EAAE,UAAU,CAAC,CACvC,CAAC;KACH,CAAC;AACJ,CAAC;AAED,SAAS,aAAa,CAAC,WAAmB,EAAE,MAAuC;IACjF,OAAO;QACL,cAAc,EAAE,yBAAyB,CAAC,MAAM,CAAC,IAAI,CAAC;QACtD,YAAY,EAAE,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,UAAU,EAAE,EAAE,CAAC,CACzE,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,UAAU,CAAC,YAAY,CAAC,CACpD,CAAC;QACF,IAAI,EAAE,sBAAsB,CAAC,MAAM,CAAC;QACpC,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,MAAM,CAAC,IAAI,CAAC;KAC9C,CAAC;AACJ,CAAC;AAED,SAAS,sBAAsB,CAAC,MAAuC;IACrE,OAAO,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,MAAM,EAAE,EAAE,CAAC,KAAK,GAAG,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC;AAC1G,CAAC;AAED,MAAM,mBAAmB,GAAG,IAAI,GAAG,EAAkB,CAAC;AACtD,SAAS,yBAAyB,CAAC,IAAY;IAC7C,IAAI,mBAAmB,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;QACjC,OAAO,mBAAmB,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC;KAC9C;IAED,MAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAEjC,KAAK,IAAI,CAAC,GAAG,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;QAC7C,IAAI,QAAQ,CAAC,CAAC,CAAC,KAAK,cAAc,EAAE;YAClC,IAAI,IAAI,GAAG,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YAE3B,IAAI,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE;gBACnD,IAAI,IAAI,GAAG,GAAG,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;aAC/B;YAED,mBAAmB,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;YACpC,OAAO,IAAI,CAAC;SACb;KACF;IAED,OAAO,IAAI,CAAC;AACd,CAAC","sourcesContent":["import { type SerializerConfigT } from 'metro-config';\nimport path from 'path';\n\ntype CustomSerializerParameters = Parameters<NonNullable<SerializerConfigT['customSerializer']>>;\ntype ConvertOptions = {\n  projectRoot: string;\n  entryPoint: CustomSerializerParameters[0];\n  preModules: CustomSerializerParameters[1];\n  graph: CustomSerializerParameters[2];\n  options: CustomSerializerParameters[3];\n};\n\nexport type MetroStatsEntry = ReturnType<typeof convertGraphToStats>;\n\nexport function convertGraphToStats({ projectRoot, entryPoint, preModules, graph, options }: ConvertOptions) {\n  return [\n    path.relative(projectRoot, entryPoint),\n    preModules.map((module) => convertModule(projectRoot, module)),\n    convertGraph(projectRoot, graph),\n    convertOptions(options),\n  ];\n}\n\nfunction convertOptions(options: ConvertOptions['options']) {\n  return {\n    ...options,\n    processModuleFilter: undefined,\n    createModuleId: undefined,\n    getRunModuleStatement: undefined,\n    shouldAddToIgnoreList: undefined,\n  };\n}\n\nfunction convertGraph(projectRoot: string, graph: ConvertOptions['graph']) {\n  return {\n    ...graph,\n    entryPoints: Array.from(graph.entryPoints.values()),\n    dependencies: Array.from(graph.dependencies.values()).map((dependency) => (\n      convertModule(projectRoot, dependency)\n    )),\n  };\n}\n\nfunction convertModule(projectRoot: string, module: ConvertOptions['preModules'][0]) {\n  return {\n    nodeModuleName: getNodeModuleNameFromPath(module.path),\n    dependencies: Array.from(module.dependencies.values()).map((dependency) => (\n      path.relative(projectRoot, dependency.absolutePath)\n    )),\n    size: getModuleOutputInBytes(module),\n    path: path.relative(projectRoot, module.path),\n  };\n}\n\nfunction getModuleOutputInBytes(module: ConvertOptions['preModules'][0]) {\n  return module.output.reduce((bytes, module) => bytes + Buffer.byteLength(module.data.code, 'utf-8'), 0);\n}\n\nconst nodeModuleNameCache = new Map<string, string>();\nfunction getNodeModuleNameFromPath(path: string) {\n  if (nodeModuleNameCache.has(path)) {\n    return nodeModuleNameCache.get(path) ?? null;\n  }\n\n  const segments = path.split('/');\n\n  for (let i = segments.length - 1; i >= 0; i--) {\n    if (segments[i] === 'node_modules') {\n      let name = segments[i + 1];\n\n      if (name.startsWith('@') && i + 2 < segments.length) {\n        name += '/' + segments[i + 2];\n      }\n\n      nodeModuleNameCache.set(path, name);\n      return name;\n    }\n  }\n\n  return null;\n}\n"]}