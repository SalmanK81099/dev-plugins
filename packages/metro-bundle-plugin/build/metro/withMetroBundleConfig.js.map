{"version":3,"file":"withMetroBundleConfig.js","sourceRoot":"","sources":["../../src/metro/withMetroBundleConfig.ts"],"names":[],"mappings":"AACA,OAAO,IAAI,MAAM,MAAM,CAAC;AACxB,OAAO,EAAE,MAAM,IAAI,CAAC;AACpB,OAAO,EAAE,mBAAmB,EAAE,MAAM,uBAAuB,CAAC;AAE5D,MAAM,UAAU,qBAAqB,CAAC,MAAmB;IACvD,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE;QACvB,MAAM,IAAI,KAAK,CAAC,8CAA8C,CAAC,CAAC;KACjE;IAED,MAAM,kBAAkB,GAAG,MAAM,CAAC,UAAU,EAAE,gBAAgB,IAAI,CAAC,GAAG,EAAE,GAAE,CAAC,CAAC,CAAC;IAC7E,MAAM,WAAW,GAAG,MAAM,CAAC,WAAW,CAAC;IAEvC,MAAM,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,kBAAkB,CAAC,CAAC;IAEpE,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,EAAE;QAC3C,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;KAC5D;SAAM;QACL,EAAE,CAAC,aAAa,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;KACjC;IAED,mBAAmB;IACnB,MAAM,CAAC,UAAU,CAAC,gBAAgB,GAAG,CAAC,UAAU,EAAE,UAAU,EAAE,KAAK,EAAE,OAAO,EAAE,EAAE;QAC9E,MAAM,KAAK,GAAG,mBAAmB,CAAC,EAAE,WAAW,EAAE,UAAU,EAAE,UAAU,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC;QAE3F,EAAE,CAAC,QAAQ,CAAC,UAAU,CAAC,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,CAAC;QAChE,OAAO,kBAAkB,CAAC,UAAU,EAAE,UAAU,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;IACpE,CAAC,CAAC;IAEF,OAAO,MAAM,CAAC;AAChB,CAAC","sourcesContent":["import { type MetroConfig } from 'metro-config';\nimport path from 'path';\nimport fs from 'fs';\nimport { convertGraphToStats } from './convertGraphToStats';\n\nexport function withMetroBundleConfig(config: MetroConfig) {\n  if (!config.projectRoot) {\n    throw new Error('No \"projectRoot\" configured in Metro config.');\n  }\n\n  const originalSerializer = config.serializer?.customSerializer ?? (() => {});\n  const projectRoot = config.projectRoot;\n\n  const statsFile = path.join(config.projectRoot, '.expo/stats.json');\n\n  if (!fs.existsSync(path.dirname(statsFile))) {\n    fs.mkdirSync(path.dirname(statsFile), { recursive: true });\n  } else {\n    fs.writeFileSync(statsFile, '');\n  }\n\n  // @ts-expect-error\n  config.serializer.customSerializer = (entryPoint, preModules, graph, options) => {\n    const stats = convertGraphToStats({ projectRoot, entryPoint, preModules, graph, options });\n    \n    fs.promises.appendFile(statsFile, JSON.stringify(stats) + '\\n');\n    return originalSerializer(entryPoint, preModules, graph, options);\n  };\n\n  return config;\n}\n"]}