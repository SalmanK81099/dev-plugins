{"version":3,"file":"createStatsFile.js","sourceRoot":"","sources":["../../../src/metro/createStatsFile.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,IAAI,CAAC;AACpB,OAAO,IAAI,MAAM,MAAM,CAAC;AAGxB,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,MAAM,oBAAoB,CAAC;AAEnD,mDAAmD;AACnD,MAAM,UAAU,YAAY,CAAC,WAAmB;IAC9C,OAAO,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,kBAAkB,CAAC,CAAC;AACpD,CAAC;AAED;;;GAGG;AACH,MAAM,CAAC,KAAK,UAAU,eAAe,CAAC,WAAmB;IACvD,MAAM,QAAQ,GAAG,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;IACnC,MAAM,QAAQ,GAAG,YAAY,CAAC,WAAW,CAAC,CAAC;IAE3C,MAAM,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;IACrE,MAAM,EAAE,CAAC,QAAQ,CAAC,SAAS,CAAC,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,CAAC;AACzE,CAAC;AAED;;;GAGG;AACH,MAAM,CAAC,KAAK,UAAU,aAAa,CAAC,WAAmB,EAAE,KAAsB;IAC7E,MAAM,EAAE,CAAC,QAAQ,CAAC,UAAU,CAAC,YAAY,CAAC,WAAW,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,CAAC;AACxF,CAAC","sourcesContent":["import fs from 'fs';\nimport path from 'path';\n\nimport { type MetroStatsEntry } from './convertGraphToStats';\nimport { name, version } from '../../package.json';\n\n/** The default location of the metro stats file */\nexport function getStatsPath(projectRoot: string) {\n  return path.join(projectRoot, '.expo/stats.json');\n}\n\n/**\n * Create or overwrite the stats file with basic metadata.\n * This metdata is used by the API to determine version compatibility.\n */\nexport async function createStatsFile(projectRoot: string) {\n  const metadata = { name, version };\n  const filePath = getStatsPath(projectRoot);\n  \n  await fs.promises.mkdir(path.dirname(filePath), { recursive: true });\n  await fs.promises.writeFile(filePath, JSON.stringify(metadata) + '\\n');\n}\n\n/**\n * Add a new stats entry to the stats file.\n * This is appended on a new line, so we can load the stats selectively.\n */\nexport async function addStatsEntry(projectRoot: string, stats: MetroStatsEntry) {\n  await fs.promises.appendFile(getStatsPath(projectRoot), JSON.stringify(stats) + '\\n');\n}\n"]}