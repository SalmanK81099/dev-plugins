{"version":3,"file":"readStatsFile.js","sourceRoot":"","sources":["../../../src/metro/readStatsFile.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,0CAAoB;AAEpB,sCAAkE;AAClE,qDAAoD;AAEpD,oCAAmC;AAEnC,SAAsB,iBAAiB,CAAC,SAAiB,EAAE,QAA4B;IAA5B,yBAAA,EAAA,eAAW,iCAAe,GAAE;;;;;;oBACrF,IAAI,CAAC,YAAE,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE;wBAC7B,MAAM,IAAI,KAAK,CAAC,uBAAe,SAAS,kBAAc,CAAC,CAAC;qBACzD;oBAED,IAAI,SAAG,CAAC,wBAAwB,EAAE;wBAChC,sBAAO;qBACR;oBAEY,qBAAM,IAAA,oBAAa,EAAC,SAAS,CAAC,EAAA;;oBAArC,IAAI,GAAG,SAA8B;oBACrC,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;oBAE1C,IAAI,IAAI,CAAC,IAAI,KAAK,QAAQ,CAAC,IAAI,IAAI,IAAI,CAAC,OAAO,KAAK,QAAQ,CAAC,OAAO,EAAE;wBACpE,MAAM,IAAI,KAAK,CAAC,uBAAe,SAAS,wDAAoD,CAAC,CAAC;qBAC/F;;;;;CACF;AAfD,8CAeC;AAED;;;GAGG;AACH,SAAsB,gBAAgB,CAAC,SAAiB;;;;;;oBAChD,OAAO,GAAmC,EAAE,CAAC;oBAC7C,aAAa,GAAG,aAAa,CAAC;oBAEpC,qBAAM,IAAA,eAAQ,EAAC,SAAS,EAAE,UAAC,KAAK,EAAE,IAAI;;4BACpC,IAAI,KAAK,KAAK,CAAC;gCAAE,OAAO;4BAElB,IAAA,KAAY,MAAA,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,mCAAI,EAAE,EAA1C,CAAC,QAAA,EAAE,IAAI,QAAmC,CAAC;4BAClD,IAAI,IAAI,EAAE;gCACR,OAAO,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,KAAK,EAAE,IAAI,MAAA,EAAE,CAAC,CAAC;6BACnC;wBACH,CAAC,CAAC,EAAA;;oBAPF,SAOE,CAAC;oBAEH,sBAAO,OAAO,EAAC;;;;CAChB;AAdD,4CAcC;AAED;;GAEG;AACH,SAAsB,aAAa,CAAC,SAAiB,EAAE,EAAU;;;;;wBAClD,qBAAM,IAAA,eAAQ,EAAC,SAAS,EAAE,EAAE,CAAC,EAAA;;oBAApC,IAAI,GAAG,SAA6B;oBAC1C,IAAI,CAAC,IAAI,EAAE;wBACT,MAAM,IAAI,KAAK,CAAC,wBAAgB,EAAE,kBAAc,CAAC,CAAC;qBACnD;oBAED,sBAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAC;;;;CACzB;AAPD,sCAOC","sourcesContent":["import fs from 'fs';\n\nimport { mapLines, readFirstLine, readLine } from '../utils/file';\nimport { getStatsMetdata } from './createStatsFile';\nimport { type MetroStatsEntry } from './convertGraphToStats';\nimport { env } from '../utils/env';\n\nexport async function validateStatsFile(statsFile: string, metadata = getStatsMetdata()) {\n  if (!fs.existsSync(statsFile)) {\n    throw new Error(`Stats file \"${statsFile}\" not found.`);\n  }\n\n  if (env.EXPO_NO_STATS_VALIDATION) {\n    return;\n  }\n\n  const line = await readFirstLine(statsFile);\n  const data = line ? JSON.parse(line) : {};\n\n  if (data.name !== metadata.name || data.version !== metadata.version) {\n    throw new Error(`Stats file \"${statsFile}\" is incompatible with this version of the plugin.`);\n  }\n}\n\n/**\n * List all stats entries without parsing the data.\n * This only reads the bundle name, and adds a line number as ID.\n */\nexport async function listStatsEntries(statsFile: string) {\n  const entries: { id: number; name: string }[] = [];\n  const bundlePattern = /^\\[\"([^\"]+)/;\n\n  await mapLines(statsFile, (index, line) => {\n    if (index === 1) return;\n\n    const [_, name] = line.match(bundlePattern) ?? [];\n    if (name) {\n      entries.push({ id: index, name });\n    }\n  });\n\n  return entries;\n}\n\n/**\n * Get the stats entry by id or line number, and parse the data.\n */\nexport async function getStatsEntry(statsFile: string, id: number): Promise<MetroStatsEntry> {\n  const line = await readLine(statsFile, id);\n  if (!line) {\n    throw new Error(`Stats entry \"${id}\" not found.`);\n  }\n\n  return JSON.parse(line);\n}\n"]}