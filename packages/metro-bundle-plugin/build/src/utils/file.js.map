{"version":3,"file":"file.js","sourceRoot":"","sources":["../../../src/utils/file.ts"],"names":[],"mappings":"AAAA,OAAO,MAAM,MAAM,QAAQ,CAAC;AAC5B,OAAO,EAAE,MAAM,IAAI,CAAC;AACpB,OAAO,QAAQ,MAAM,UAAU,CAAC;AAEhC,MAAM,CAAC,KAAK,UAAU,aAAa,CAAC,QAAgB;IAClD,MAAM,MAAM,GAAG,EAAE,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;IAC7C,MAAM,MAAM,GAAG,QAAQ,CAAC,eAAe,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,CAAC;IAC3D,MAAM,QAAQ,GAAG,IAAI,OAAO,CAAS,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QACvD,MAAM,CAAC,EAAE,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;QAC3B,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,EAAE;YACzB,MAAM,CAAC,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,IAAI,CAAC,CAAC;QAChB,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC;IAEvC,OAAO,MAAM,QAAQ,CAAC;AACxB,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,QAAQ,CAAC,QAAgB,EAAE,QAAiD;IAChG,MAAM,MAAM,GAAG,EAAE,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;IAC7C,MAAM,MAAM,GAAG,QAAQ,CAAC,eAAe,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,CAAC;IAC3D,IAAI,UAAU,GAAG,CAAC,CAAC;IAEnB,MAAM,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,KAAK,EAAE,EAAE;QAC3B,MAAM,KAAK,CAAC;IACd,CAAC,CAAC,CAAC;IAEH,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE,EAAE;QAC7B,QAAQ,CAAC,UAAU,EAAE,EAAE,QAAQ,CAAC,CAAC;IACnC,CAAC,CAAC,CAAC;IAEH,MAAM,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;AACrC,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,QAAQ,CAAC,QAAgB,EAAE,IAAY;IAC3D,MAAM,MAAM,GAAG,EAAE,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;IAC7C,MAAM,MAAM,GAAG,QAAQ,CAAC,eAAe,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,CAAC;IAC3D,IAAI,UAAU,GAAG,CAAC,CAAC;IAEnB,MAAM,QAAQ,GAAG,IAAI,OAAO,CAAS,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QACvD,MAAM,CAAC,EAAE,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;QAC3B,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE,EAAE;YAC7B,IAAI,UAAU,EAAE,KAAK,IAAI,EAAE;gBACzB,MAAM,CAAC,KAAK,EAAE,CAAC;gBACf,OAAO,CAAC,QAAQ,CAAC,CAAC;aACnB;QACH,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC;IAEvC,OAAO,MAAM,QAAQ,CAAC;AACxB,CAAC","sourcesContent":["import events from 'events';\nimport fs from 'fs';\nimport readline from 'readline';\n\nexport async function readFirstLine(filePath: string) {\n  const stream = fs.createReadStream(filePath);\n  const reader = readline.createInterface({ input: stream });\n  const contents = new Promise<string>((resolve, reject) => {\n    reader.on('error', reject);\n    reader.on('line', (line) => {\n      reader.close();\n      resolve(line);\n    });\n  });\n\n  contents.finally(() => stream.close());\n\n  return await contents;\n}\n\nexport async function mapLines(filePath: string, callback: (line: number, contents: string) => any) {\n  const stream = fs.createReadStream(filePath);\n  const reader = readline.createInterface({ input: stream });\n  let lineNumber = 1;\n\n  reader.on('error', (error) => {\n    throw error;\n  });\n\n  reader.on('line', (contents) => {\n    callback(lineNumber++, contents);\n  });\n\n  await events.once(reader, 'close');\n}\n\nexport async function readLine(filePath: string, line: number) {\n  const stream = fs.createReadStream(filePath);\n  const reader = readline.createInterface({ input: stream });\n  let lineNumber = 1;\n\n  const contents = new Promise<string>((resolve, reject) => {\n    reader.on('error', reject); \n    reader.on('line', (contents) => {\n      if (lineNumber++ === line) {\n        reader.close();\n        resolve(contents);\n      }\n    });\n  });\n  \n  contents.finally(() => stream.close());\n\n  return await contents;\n}\n"]}